
@model IEnumerable<LMDH_QS.Models.Queue>

@{
    ViewData["Title"] = "Pre-Assessment";
}

<div class="container-fluid p-4">

    <div class="d-flex flex-wrap justify-content-between align-items-center">
        <h1 class="text-dark fw-bold m-0">Pre-Assessment</h1>

        <div class="text-end">
            <h5 class="text-secondary fw-semibold mb-2">Queue Status Legend</h5>
            <ul class="list-unstyled mb-0">
                <li><span class="badge bg-warning text-dark px-3 py-1">Serving</span></li>
                <li><span class="badge bg-info text-dark px-3 py-1">Done</span></li>
                <li><span class="badge bg-success text-white px-3 py-1">Standby</span></li>
            </ul>
        </div>
    </div>

    <hr />

    <div class="table-responsive shadow-sm rounded">
        <table class="table table-striped text-center align-middle">
            <thead class="table-dark">
                <tr>
                    <th>Department</th>
                    <th>Check-in Time</th>
                    <th>Patient Name</th>
                    <th>Ticket No.</th>
                    <th></th>
                </tr>
            </thead>
            <tbody id="queueTable">
               
            </tbody>
          
        </table>

        <h5 class="mt-4">Missed Patients</h5>
        <table class="table table-bordered table-striped">
            <thead class="table-secondary">
                <tr>
                    <th>Department</th>
                    <th>Check-in Time</th>
                    <th>Patient Name</th>
                    <th>Ticket No.</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody id="missedTable">
               
            </tbody>
        </table>
    </div>
</div>

<!-- Vital Signs Modal -->
<div class="modal fade" id="vitalModal" tabindex="-1" aria-labelledby="vitalModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">

            <div class="modal-header">
                <h5 class="modal-title" id="vitalModalLabel">Input Vital Signs</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <form id="vitalForm">
                <input type="hidden" id="PatientId" name="PatientId" value="" />
                <input type="hidden" id="VisitDate" name="VisitDate" value="" />

                <div class="modal-body">
                    <div class="mb-3">
                        <label for="bp" class="form-label">Blood Pressure (BP)</label>
                        <input type="text" class="form-control" id="bp" name="BP" placeholder="e.g. 120/80" required>
                    </div>
                    <div class="mb-3">
                        <label for="cr" class="form-label">Cardiac Rate (CR)</label>
                        <input type="number" class="form-control" id="cr" name="CR" placeholder="e.g. 75" required>
                    </div>
                    <div class="mb-3">
                        <label for="pr" class="form-label">Pulse Rate (PR)</label>
                        <input type="number" class="form-control" id="pr" name="PR" placeholder="e.g. 72" required>
                    </div>
                    <div class="mb-3">
                        <label for="temp" class="form-label">Temperature (°C)</label>
                        <input type="number" step="0.1" class="form-control" id="temp" name="Temp" placeholder="e.g. 36.5" required>
                    </div>
                    <div class="mb-3">
                        <label for="weight" class="form-label">Weight (kg)</label>
                        <input type="number" step="0.1" class="form-control" id="weight" name="Weight" placeholder="e.g. 60" required>
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Save</button>
                </div>
            </form>



        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>

   <script>
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/queueHub")
        .build();

    // --- debounce to avoid request spam ---
    let fetchQueueTimer, fetchMissedTimer;

    function safeFetchQueue() {
        clearTimeout(fetchQueueTimer);
        fetchQueueTimer = setTimeout(fetchQueue, 400);
    }

    function safeFetchMissedQueue() {
        clearTimeout(fetchMissedTimer);
        fetchMissedTimer = setTimeout(fetchMissedQueue, 400);
    }

    // ✅ Track recorded patients (client memory)
    const recordedPatients = new Set();

    // ✅ only refresh when hub says so
    connection.on("UpdateQueue", () => {
        fetchQueue()
        fetchMissedQueue()
    });

    // Start SignalR
    connection.start()
        .then(() => {
            console.log("✅ SignalR connected (Pre-assessment)");
            fetchQueue();
            fetchMissedQueue();
        })
        .catch(err => console.error("SignalR Error:", err));

    // --- Fetch helpers ---
    async function fetchQueue() {
        try {
            const res = await fetch('/Staff/QueueRows');
            if (!res.ok) throw new Error(res.statusText);
            const html = await res.text();
            document.getElementById('queueTable').innerHTML = html;

            // ✅ Re-apply "Vital Recorded" state
            recordedPatients.forEach(pid => {
                const btn = document.querySelector(`#row-${pid} #vitalBtn`);
                if (btn) {
                    btn.innerText = "Vital Recorded";
                    btn.disabled = true;
                    btn.classList.remove("btn-primary");
                    btn.classList.add("btn-success");
                }
            });
        } catch (err) {
            console.error("fetchQueue failed:", err);
        }
    }

    async function fetchMissedQueue() {
        try {
            const res = await fetch('/Staff/MissedList');
            if (!res.ok) throw new Error(res.statusText);
            const html = await res.text();
            document.getElementById('missedTable').innerHTML = html;
        } catch (err) {
            console.error("fetchMissedQueue failed:", err);
        }
    }

    function updateTopPatient(action) {
        let firstRow = document.querySelector("#queueTable tr:not(:last-child)");
        if (!firstRow) {
            Swal.fire("No patients", "There are no patients in the queue.", "info");
            return;
        }
        let patientId = firstRow.id.replace("row-", "");
        let department = firstRow.getAttribute("data-department");
        let visitDate = firstRow.getAttribute("data-visitdate");
        updateStatus(patientId, action, visitDate, department);
    }

    // --- Status update ---
    function updateStatus(patientId, action, visitDate, department) {
        let safeDateStr = (visitDate || "").trim();
        if (safeDateStr.includes(' ')) safeDateStr = safeDateStr.replace(' ', 'T');
        if (safeDateStr.includes('.')) safeDateStr = safeDateStr.split('.')[0];

        const rawDate = new Date(safeDateStr);
        if (isNaN(rawDate.getTime())) {
            console.error("❌ Invalid visitDate:", visitDate);
            Swal.fire("Invalid Date", "The visit date is invalid or missing.", "error");
            return;
        }

        const formattedVisitDate = rawDate.toISOString().split("T")[0];

        if (action === 'Skip') {
            Swal.fire({
                title: 'Confirm Skip?',
                text: "Skip if the patient goes to Laboratory/Referral and results release next day.",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Yes, Skip',
                cancelButtonText: 'Cancel',
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6'
            }).then((result) => {
                if (result.isConfirmed) {
                    sendStatusUpdate(patientId, action, formattedVisitDate, department);
                }
            });
        } else {
            console.log("PatientId:", patientId);
            console.log("Action:", action);
            console.log("Department:", department);
            console.log("VisitDate:", formattedVisitDate);
            sendStatusUpdate(patientId, action, formattedVisitDate, department);
        }
    }

    async function sendStatusUpdate(patientId, action, visitDate, department) {
        try {
            const res = await fetch(`/Staff/${action}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    PatientIdentification: patientId,
                    VisitDate: visitDate,
                    Department: department
                })
            });

            const data = await res.json().catch(() => null);
            if (!res.ok || !data) throw new Error(data?.message || "Unknown server error");

            if (data.success) {
                if (data.removeRow) {
                    const row = document.getElementById(`row-${patientId}`);
                    if (row) row.remove();
                }

                if (action === 'Skip') {
                    Swal.fire({
                        icon: 'success',
                        title: 'Patient Skipped',
                        text: 'The patient has been marked as skipped.',
                        timer: 2000,
                        showConfirmButton: false
                    });
                }
            } else {
                Swal.fire("Failed", data?.message || "An error occurred.", "error");
            }
        } catch (err) {
            console.error(`${action} failed:`, err);
            Swal.fire("Error", err.message || "Something went wrong. Please try again.", "error");
        }
    }

    //For Patient Vital Record
    document.addEventListener("DOMContentLoaded", function () {
        const modalEl = document.getElementById("vitalModal");

        document.addEventListener("click", function (e) {
            const btn = e.target.closest("[data-bs-target='#vitalModal']");
            if (btn) {
                const patientId = btn.getAttribute("data-patient-id");
                const visitDate = btn.getAttribute("data-visitdate");
                const patientIdInput = document.getElementById("PatientId");
                const visitDateInput = document.getElementById("VisitDate");

                if (patientIdInput) patientIdInput.value = patientId;
                if (visitDateInput) visitDateInput.value = visitDate;
            }
        });

        modalEl.addEventListener("shown.bs.modal", function () {
            const form = document.getElementById("vitalForm");

            if (form && !form.dataset.listenerAdded) {
                form.addEventListener("submit", function (e) {
                    e.preventDefault();
                    const formData = new FormData(this);

                    fetch('/Staff/SaveVitalRecord', {
                        method: 'POST',
                        body: formData,
                        credentials: 'same-origin'
                    })
                        .then(res => res.json())
                        .then(data => {
                            if (data.success) {
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Saved!',
                                    text: data.message
                                }).then(() => {
                                    bootstrap.Modal.getInstance(modalEl).hide();
                                    form.reset();

                                    const patientId = document.getElementById("PatientId").value;
                                    recordedPatients.add(patientId); // ✅ remember patient

                                    const vitalBtn = document.getElementById("vitalBtn");
                                    if (vitalBtn) {
                                        vitalBtn.innerText = "Vital Recorded";
                                        vitalBtn.disabled = true;
                                        vitalBtn.classList.remove("btn-primary");
                                        vitalBtn.classList.add("btn-success");
                                    }
                                });
                            } else {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Oops...',
                                    text: data.message || 'Error saving data!'
                                });
                            }
                        })
                        .catch(err => {
                            console.error("❌ Fetch error:", err);
                            Swal.fire({
                                icon: 'error',
                                title: 'Unexpected Error',
                                text: 'Something went wrong. Please try again.'
                            });
                        });
                });

                form.dataset.listenerAdded = "true";
            }
        });
    });

    // ✅ Handle Consultation Button Click
    document.addEventListener("click", function (e) {
        const consultBtn = e.target.closest("#consultBtn");
        if (!consultBtn) return;

        const firstRow = document.querySelector("#queueTable tr:not(:last-child)");
        if (!firstRow) return;
        const patientId = firstRow.id.replace("row-", "");

        if (!recordedPatients.has(patientId)) {
            Swal.fire({
                icon: 'warning',
                title: 'Action Not Allowed',
                text: 'Please record the patient\'s vital signs before sending for consultation.'
            });
            return;
        }

        updateTopPatient('Consultation');
    });
</script>


    
}
