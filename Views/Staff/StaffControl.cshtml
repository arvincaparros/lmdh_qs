
@model IEnumerable<LMDH_QS.Models.Queue>

@{
    ViewData["Title"] = "Staff Control Panel";
}

<div class="container-fluid p-4">

    <div class="d-flex flex-wrap justify-content-between align-items-center">
        <h1 class="text-dark fw-bold m-0">Pre-Assessment</h1>

        <div class="text-end">
            <h5 class="text-secondary fw-semibold mb-2">Queue Status Legend</h5>
            <ul class="list-unstyled mb-0">
                <li><span class="badge bg-warning text-dark px-3 py-1">Serving</span></li>
                <li><span class="badge bg-info text-dark px-3 py-1">Done</span></li>
                <li><span class="badge bg-success text-white px-3 py-1">Standby</span></li>
            </ul>
        </div>
    </div>

    <hr />

    <h2 class="text-center fw-bold text-primary mb-4">Staff Control Panel</h2>

    <div class="table-responsive shadow-sm rounded">
        <table class="table table-striped text-center align-middle">
            <thead class="table-dark">
                <tr>
                    <th>Department</th>
                    <th>Check-in Time</th>
                    <th>Patient Name</th>
                    <th>Ticket No.</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody id="queueTable">
               
            </tbody>
          
        </table>

        <h5 class="mt-4">Missed Patients</h5>
        <table class="table table-bordered table-striped">
            <thead class="table-secondary">
                <tr>
                    <th>Department</th>
                    <th>Check-in Time</th>
                    <th>Patient Name</th>
                    <th>Ticket No.</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody id="missedTable">
               
            </tbody>
        </table>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>

    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/queueHub")
            .build();

         // Update table and messages on queue update
        connection.on("UpdateQueue", () => {
            fetchQueue();
            fetchMissedQueue() ;
        });

        // connection.start().catch(err => console.error(err.toString()));

         connection.start()
            .then(() => {
                console.log("SignalR connected");
                fetchQueue();
                fetchMissedQueue();
            })
            .catch(err => console.error("SignalR Error:", err));
  

        function fetchQueue() {
            fetch('/Staff/QueueRows')
                .then(res => res.text())
                .then(html => {
                    document.getElementById('queueTable').innerHTML = html;
            });
        }

        function fetchMissedQueue() {
            fetch('/Staff/MissedList')
                .then(res => res.text())
                .then(html => {
                    document.getElementById('missedTable').innerHTML = html;
            });
        }

        // 🔁 Called when any action button is clicked (Call, Skip, Done, etc.)
        function updateStatus(patientId, action, visitDate, department) {
            // console.log("🧪 visitDate input:", visitDate);

            let safeDateStr = visitDate.trim();

            // Fix SQL-style timestamp: "2025-07-18 00:00:00.0000000" → "2025-07-18T00:00:00"
            if (safeDateStr.includes(' ')) {
                safeDateStr = safeDateStr.replace(' ', 'T');
            }
            if (safeDateStr.includes('.')) {
                safeDateStr = safeDateStr.split('.')[0]; // remove milliseconds
            }

            const rawDate = new Date(safeDateStr);

            // console.log("🔍 Sanitized:", safeDateStr);
            // console.log("🔍 rawDate:", rawDate);

            if (isNaN(rawDate.getTime())) {
                console.error("❌ Invalid visitDate after sanitization:", visitDate);
                Swal.fire("Invalid Date", "The visit date is invalid or missing.", "error");
                return;
            }

            const formattedVisitDate = rawDate.toISOString();
            // console.log("✅ visitDate formatted:", formattedVisitDate);

            // Continue as before...
            if (action === 'Skip') {
                Swal.fire({
                    title: 'Confirm Skip?',
                    text: "You can skip if the patient will proceed to Laboratory or Referral, and results will be released the next day.",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes, Skip',
                    cancelButtonText: 'Cancel',
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6'
                }).then((result) => {
                    if (result.isConfirmed) {
                        sendStatusUpdate(patientId, action, formattedVisitDate, department);
                    }
                });
            } else {
                sendStatusUpdate(patientId, action, formattedVisitDate, department);
            }
        }



        // 🚀 Posts to controller and optionally removes row
            function sendStatusUpdate(patientId, action, visitDate, department) {
            fetch(`/Staff/${action}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    PatientIdentification: patientId,
                    VisitDate: visitDate,
                    Department: department
                })
            })
            .then(async res => {
                const contentType = res.headers.get('content-type');
                let data = null;

                if (contentType && contentType.includes('application/json')) {
                    data = await res.json();
                } else {
                    const text = await res.text();
                    throw new Error(`Non-JSON response: ${text}`);
                }

                if (res.ok) {
                    if (data.success) {
                        if (data.removeRow) {
                            const row = document.getElementById(`row-${patientId}`);
                            if (row) row.remove();
                        }

                        if (action === 'Skip') {
                            Swal.fire({
                                icon: 'success',
                                title: 'Patient Skipped',
                                text: 'The patient has been marked as skipped.',
                                timer: 2000,
                                showConfirmButton: false
                            });
                        }
                    } else {
                        Swal.fire("Failed", data.message || "An error occurred.", "error");
                    }
                } else {
                    throw new Error(data.message || "Unknown server error");
                }
            })
            .catch(err => {
                console.error(`${action} failed:`, err);
                Swal.fire("Error", err.message || "Something went wrong. Please try again.", "error");
            });
        }


    </script>
}
