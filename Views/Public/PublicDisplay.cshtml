@model IEnumerable<LMDH_QS.Models.Queue>

@{
    ViewData["Title"] = "Public Queue Display";
}

<div class="container-fluid p-4">
    <div class="text-center mb-4">
        <h2 class="fw-bold text-primary">LAUREL MEMORIAL DISTRICT HOSPITAL</h2>
        <h5 class="text-secondary mb-1">Queue Monitoring Display</h5>
        <div id="clock" class="fs-5 text-muted"></div>
    </div>

    <div class="mt-5">
        <div class="row g-4">
            <!-- Now Serving -->
            <div class="col-md-6">
                <div class="card shadow-lg border-0">
                    @* <div class="card-header bg-warning text-white fw-bold fs-5">
                        <i class="bi bi-person-check-fill me-2"></i> Now Serving
                    </div> *@
                    <!-- Queue Table -->
                    <div class="card shadow-lg border-0 mt-4">
                        <div class="card-header bg-dark text-white px-4 py-2 fs-4 fw-bold">
                            <i class="bi bi-people-fill me-2"></i> PRE-ASSESSMENT
                        </div>
                        <div class="card-body p-0">
                            <div class="table-responsive">
                                <table class="table table-hover table-borderless text-center align-middle fs-5 mb-0">
                                    <thead class="bg-secondary text-white">
                                        <tr class="fs-6 text-uppercase">
                                            <th class="py-2">Department</th>
                                            <th class="py-2">Check-In</th>
                                            @* <th class="py-2">Patient Name</th> *@
                                            <th class="py-2">Ticket No.</th>
                                            <th class="py-2">Status</th>
                                        </tr>
                                    </thead>
                                    <tbody id="queueTable">
                                        @* Loaded dynamically via JavaScript *@
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                 @*    <div class="card-body d-flex justify-content-center align-items-center text-center" style="height: 200px;">
                        <div id="servingSection">
                            <h1 class="display-4 fw-bold text-dark mb-0" id="servingTicket">---</h1>
                            <p class="text-muted mt-3 fs-5" id="servingMessage">Good morning! Queue will begin shortly.</p>
                        </div>
                    </div> *@
                </div>
            </div>

            <!-- Next Patient -->
            <div class="col-md-6">
                <div class="card shadow-lg border-0">
                    @* <div class="card-header bg-success text-white fw-bold fs-5">
                        <i class="bi bi-person-lines-fill me-2"></i> Next Patient
                    </div> *@
                    <!-- Queue Table -->
                    <div class="card shadow-lg border-0 mt-4">
                        <div class="card-header bg-dark text-white px-4 py-2 fs-4 fw-bold">
                            <i class="bi bi-people-fill me-2"></i> CONSULTATION
                        </div>
                        <div class="card-body p-0">
                            <div class="table-responsive">
                                <table class="table table-hover table-borderless text-center align-middle fs-5 mb-0">
                                    <thead class="bg-secondary text-white">
                                        <tr class="fs-6 text-uppercase">
                                            <th class="py-2">Department</th>
                                            <th class="py-2">Check-In</th>
                                            @* <th class="py-2">Patient Name</th> *@
                                            <th class="py-2">Ticket No.</th>
                                            <th class="py-2">Status</th>
                                        </tr>
                                    </thead>
                                    <tbody id="consultationQueueTable">
                                        @* Loaded dynamically via JavaScript *@
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                  @*   <div class="card-body d-flex justify-content-center align-items-center text-center" style="height: 200px;">
                        <div id="nextSection">
                            <h2 class="text-success mb-0" id="nextTicket">---</h2>
                            <p class="text-muted mt-2 fs-5" id="nextMessage">Waiting for next patient...</p>
                        </div>
                    </div> *@
                </div>
            </div>
        </div>
    </div>

  
</div>


<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>

<script>


    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/queueHub")
        .build();

    // ------------------------------
    // SignalR Event Handlers
    // ------------------------------

    // General queue update
    connection.on("UpdateQueue", () => {
        fetchQueue();
        // fetchConsultationQueue();
    });

    // Consultation table update only
    connection.on("UpdateConsultationQueue", () => {
        fetchConsultationQueue();
    });

    // When staff clicks "Call" in Pre-Assessment page
    connection.on("CallPatient", (data) => {
        console.log("📢 Received from hub:", data); // Debug log


        // const serving = {
        //     TicketNo: data.TicketNo || "",
        //     Department: data.Department || ""
        // };

        // const next = {
        //     TicketNo: data.NextTicketNo || "",
        //     Department: data.NextDepartment || "" // adjust if backend sends this differently
        // };

        // updateTickets(serving, next);

        // Speak out serving ticket
        // if (serving.TicketNo && serving.Department) {
            speak(`Ticket number ${data.ticketNo}. Please proceed to ${data.department}`);
        // }
    });

    // ------------------------------
    // Start SignalR Connection
    // ------------------------------
    connection.start()
        .then(() => {
            console.log("✅ SignalR connected (Public Display)");
            fetchQueue();
            fetchConsultationQueue(); // Initial load

        })
        .catch(err => console.error("SignalR Error:", err));

    // ------------------------------
    // Fetch Functions
    // ------------------------------
    function fetchQueue() {
        fetch('/Public/QueueRows')
            .then(res => res.text())
            .then(html => {
                const tbody = document.getElementById('queueTable');
                if (tbody) tbody.innerHTML = html;
            })
            .catch(err => console.error("Failed to fetch queue:", err));
    }

    function fetchConsultationQueue() {
        fetch('/Public/ConsultationQueueRows')
            .then(res => res.text())
            .then(html => {
                const tbody = document.getElementById('consultationQueueTable');
                if (tbody) tbody.innerHTML = html;
            })
            .catch(err => console.error("Failed to fetch consultation queue:", err));
    }

    // ------------------------------
    // Update Ticket Display
    // ------------------------------
    function updateTickets(serving, next) {
        const servingTicket = document.getElementById("servingTicket");
        const nextTicket = document.getElementById("nextTicket");

        const servingMsg = document.getElementById("servingMessage");
        const nextMsg = document.getElementById("nextMessage");

        // Update serving ticket display
        if (servingTicket)
            servingTicket.textContent = (serving.TicketNo && serving.Department)
                ? `${serving.TicketNo} - ${serving.Department}`
                : "---";

        // Update next ticket display
        if (nextTicket)
            nextTicket.textContent = (next.TicketNo && next.Department)
                ? `${next.TicketNo} - ${next.Department}`
                : "---";

        // Show/hide messages if no ticket
        if (servingMsg) servingMsg.style.display = (serving.TicketNo ? "none" : "block");
        if (nextMsg) nextMsg.style.display = (next.TicketNo ? "none" : "block");
    }

    // ------------------------------
    // Speech Function
    // ------------------------------
    function speak(text) {
        const synth = window.speechSynthesis;
        if (synth.speaking) {
            synth.cancel(); // avoid overlapping
        }
        const utter = new SpeechSynthesisUtterance(text);
        utter.lang = 'en-US';
        utter.rate = 0.9;
        synth.speak(utter);
    }

    // ------------------------------
    // Live Clock
    // ------------------------------
    function updateClock() {
        const now = new Date();
        const clockEl = document.getElementById('clock');
        if (clockEl) clockEl.textContent = now.toLocaleTimeString();
    }
    updateClock();
    setInterval(updateClock, 1000);

</script>

